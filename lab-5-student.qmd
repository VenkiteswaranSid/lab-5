---
title: "Lab 5: Murder in SQL City"
author: "Siddharth Venkiteswaran"
format: html
editor: source
embed-resources: true
---

For this lab, you will be joining and filtering related datasets to solve a murder mystery!

## Instructions

Northwestern University's Knight Lab wanted to help sharpen users' database skills, so they created a murder mystery. Can you solve this crime in SQL City??

The relational data you will be working with contains tables with different pieces of information pertinent to the crime - people, social media check-ins, driver's licenses, crime scene reports, police interviews, and more!

![Database schema](https://mystery.knightlab.com/schema.png)

Solve the murder mystery, showing **all of your work in this document**. Your document and code must be well organized, easy to follow, and reproducible.

+ Use headers and written descriptions to indicate what you are doing.
+ Use `dplyr` verbs and `join` functions rather than just looking through the tables manually.
+ Use good code formatting practices.
+ Comment your code.
+ Cite any external sources you use to solve the mystery.

### Tips 

You may find the `pull()` function handy for displaying each clue as you go along.


## Access the Data

This code chunk will read in all of the tables of data for you. Don't modify or remove this!

```{r}
#| message: false
#| warning: false
#| label: read-in-data

library(tidyverse)

# If purrr is not detected, install the package
if (!"purrr" %in% installed.packages()) install.packages("purrr")

source("https://raw.githubusercontent.com/atheobold/groupworthy-data-science/main/labs/instructions/lab-5-setup.R")
```

## Solve the Crime

### Crime Scene Report

Detective Wickham reaches out to you...

> A crime has taken place and I need your help! There was a murder in SQL City sometime on January 15, 2018. Could you retrieve the crime scene report from the police departmentâ€™s database and follow the clues to find the person responsible for the murder?!

```{r}
#| label: inspecting-crime-scene-report
## Get the description of the crime as well as the description
crime_scene_report |>
  filter(city == "SQL City",
         type == "murder",
         date == 20180115) |>
  pull(description)

## First witness interview
person |>
  full_join(interview,
            by = join_by("id" == "person_id")) |>
  filter(address_street_name == "Northwestern Dr") |>
  arrange(desc(address_number)) |>
  slice(1) |>
  pull(transcript)

## Second witness interview
person |>
  full_join(interview,
            by = join_by("id" == "person_id")) |>
  filter(address_street_name == "Franklin Ave",
         name == "Annabel Miller") |>
  pull(transcript)

## Find the suspect
get_fit_now_member |>
  full_join(get_fit_now_check_in,
            by = join_by("id" == "membership_id")) |>
  filter(membership_status == "gold",
         str_detect(id, "48Z."),
         check_in_date == 20180109) |>
  inner_join(person,
            by = join_by("person_id" == "id")) |>
  inner_join(drivers_license,
             by = join_by("license_id" == "id"))

## Jeremy Bowers Interview
person |> 
  full_join(interview,
            by = join_by("id" == "person_id")) |>
  filter(name == "Jeremy Bowers") |>
  pull(transcript)

## Find the real culprit
person |>
  full_join(drivers_license,
            by = join_by("license_id" == "id")) |>
  full_join(facebook_event_checkin,
            by = join_by("id" == "person_id")) |>
  full_join(income,
            by = join_by("ssn" == "ssn")) |>
  filter(height == c(65:67),
         hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S",
         str_detect(event_name, "SQL Symphony")) |>
  pull(name)
```



**Follow the evidence to the person responsible for the murder, building a report as you go.**
Hint: Make sure you check for interviews with any suspects!


## And the final suspect is...

*Miranda Priestly*
